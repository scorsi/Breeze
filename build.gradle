buildscript {
    ext.kotlin_version = '1.2.50'
    ext.antlr_version = '4.7.1'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'com.scorsi'
version '0.1'

apply plugin: 'kotlin'
apply plugin: 'antlr'
apply plugin: 'application' // TO REMOVE LATER

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-stdlib-jdk8
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: "$kotlin_version"

    // https://mvnrepository.com/artifact/org.antlr/antlr4
    antlr group: 'org.antlr', name: 'antlr4', version: "$antlr_version"

    // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
    compile group: 'org.antlr', name: 'antlr4-runtime', version: "$antlr_version"

    // https://mvnrepository.com/artifact/io.kotlintest/kotlintest-runner-junit5
    testCompile group: 'io.kotlintest', name: 'kotlintest-runner-junit5', version: '3.1.6'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
}

generateGrammarSource {
    outputDirectory = new File("${project.buildDir}/generated-src/antlr/main/com/scorsi".toString())
    arguments += ["-visitor", "-no-listener", "-package", "com.scorsi"]
}
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    dependsOn(generateGrammarSource)
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()

    testLogging.showStandardStreams = true

    minHeapSize = "128m"
    maxHeapSize = "512m"

    failFast = false

    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }

    /*
    onOutput { descriptor, event ->
        logger.lifecycle("Test: $descriptor produced standard out/err: $event.message")
    }
     */
}

mainClassName = "com.scorsi.MainKt"

kotlin {
    experimental {
        coroutines "enable"
    }
}